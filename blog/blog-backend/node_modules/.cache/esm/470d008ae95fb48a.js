let jwtMiddleware,Koa,Router,bodyParser,mongoose,api,createFakeData;_e95‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);_e95‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_e95‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_e95‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_e95‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_e95‍.w("./api",[["default",["api"],function(v){api=v}]]);_e95‍.w("./createFakeData",[["default",["createFakeData"],function(v){createFakeData=v}]]);

require('dotenv').config();








// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
// eslint-disable-next-line no-undef
const {PORT, MONGO_URI} = process.env;

mongoose
    .connect(MONGO_URI, {useNewUrlParser: true, useFindAndModify: false})
    .then(() => {
        console.log('Connected to MongoDB');
        // createFakeData();
    })
    .catch(e => {
        _e95‍.g.console.error(e);
    })

const app = new Koa();
const router = new Router();

router.use('/api', api.routes());

// 라우터 적용 전에 bodyParser 적용
app.use(bodyParser());
app.use(jwtMiddleware);

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;
app.listen(port, () => {
    _e95‍.g.console.log('Listening to port %d', port);
});